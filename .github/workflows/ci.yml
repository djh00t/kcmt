name: CI

on:
  push:
    branches:
      - "**"
  pull_request:
    branches:
      - "**"
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint-type-test:
    name: Lint, type-check, and tests (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.12", "3.13"]
    env:
      # Ensure git commits in tests have a valid identity
      GIT_AUTHOR_NAME: "kcmt-ci"
      GIT_AUTHOR_EMAIL: "kcmt-ci@example.com"
      GIT_COMMITTER_NAME: "kcmt-ci"
      GIT_COMMITTER_EMAIL: "kcmt-ci@example.com"
      # Make warnings fail CI similar to strict local runs
      PYTHONWARNINGS: "default,error::DeprecationWarning,error::ResourceWarning"
      PIP_DISABLE_PIP_VERSION_CHECK: "1"
      UV_SYSTEM_PYTHON: "0"

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python and uv
        uses: astral-sh/setup-uv@v4
        with:
          python-version: ${{ matrix.python-version }}
          enable-cache: true

      - name: Configure Git identity
        run: |
          git config --global user.name "kcmt-ci"
          git config --global user.email "ci@example.com"

      - name: Show versions
        run: |
          python --version
          uv --version

      - name: Configure git identity
        run: |
          git config --global user.name  "${GIT_AUTHOR_NAME}"
          git config --global user.email "${GIT_AUTHOR_EMAIL}"
          git config --global init.defaultBranch main

      - name: Sync dependencies (dev)
        run: uv sync --all-extras --dev

      - name: Install project (editable)
        run: uv pip install -e .

      - name: Ruff (lint)
        run: uv run ruff check kcmt tests

      - name: Black (format check)
        run: uv run black --check kcmt tests

      - name: isort (imports check)
        run: uv run isort --check-only kcmt tests

      - name: Mypy (type check)
        run: uv run mypy --config-file pyproject.toml

      # Important: scrub env that could bias provider auto-detection in tests.
      # Some runners or secrets may provide OPENAI_* or KCMT_PROVIDER which
      # causes load_config() to prefer OpenAI over Anthropic even when tests
      # set ANTHROPIC_* variables.
      - name: Pytest (unit + coverage) with sanitized provider env
        shell: bash
        run: |
          python - <<'PY'
          import os, sys, subprocess
          # Remove variables that can force provider selection globally.
          for k in list(os.environ):
              if k.startswith("OPENAI_") or k == "KCMT_PROVIDER":
                  os.environ.pop(k, None)
          # Ensure GitHub token doesn't influence detection paths.
          os.environ.pop("GITHUB_TOKEN", None)
          # Do not globally disable OpenAI paths; tests control stubbing.
          cmd = [
              "uv","run","pytest","-n","auto","-ra","-vv",
              "-W","default","-W","error::DeprecationWarning","-W","error::ResourceWarning",
              "--strict-config","--strict-markers",
              "--cov=kcmt","--cov-branch","--cov-report=term-missing:skip-covered",
          ]
          sys.exit(subprocess.call(cmd))
          PY
